import random
import math
import numpy as np
import numpy.random
import sklearn.preprocessing
from osgeo import gdal
from osgeo import gdal_array
import matplotlib.pyplot as plt
from sklearn import svm
from sklearn.metrics import accuracy_score,recall_score,precision_score,f1_score,confusion_matrix,classification_report,cohen_kappa_score
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.cluster import KMeans,MiniBatchKMeans
import scipy.signal as signal



def IMGCombine(IMG1,IMG2):
    IMG=np.concatenate((IMG1,IMG2),axis=0)
    return IMG


def ReadImg(filename):
    dataset = gdal.Open(filename, gdal.GA_ReadOnly)
    if not dataset:
        print('错误的路径！')
    print("Informations of image: {}".format(filename))
    print("Driver: {}/{}".format(dataset.GetDriver().ShortName, dataset.GetDriver().LongName))
    print("Size is {} x {} x {}".format(dataset.RasterXSize, dataset.RasterYSize, dataset.RasterCount))
    print("Projection is {}".format(dataset.GetProjection()))
    geotransform = dataset.GetGeoTransform()
    if geotransform:
        print("Origin = ({}, {})".format(geotransform[0], geotransform[3]))
        print("Pixel Size = ({}, {})".format(geotransform[1], geotransform[5]))
        print()
    return dataset


def sigm(x):
    return  1/(1+np.exp(-x))


def ImgFeatureExtraction(img):
    print()
    print('feature extraction!')
    print('shape of image: {}'.format(img.shape))
    #img2=img.astype('float')
    img2 = np.zeros((img.shape[0], img.shape[1],img.shape[2]), dtype=float, order='C')
    img2[0] = 100 * np.exp((img[2].astype('float') - 0.5 * img[3].astype('float') - 0.5 * img[1].astype('float')) / (img[2].astype('float') + 0.5 * img[3].astype('float') + 0.5 * img[1].astype('float')))
    # NDVI
    img2[1] = 100 * np.exp(np.divide((img[3].astype('float') - img[2].astype('float')).astype('float'),(img[3].astype('float') + img[2].astype('float')).astype('float')))
    # savi
    img2[2]=100 * np.exp(((img[3].astype('float') - img[2].astype('float')) / (img[3].astype('float') + img[2].astype('float') + 0.5)) * (1 + 0.5))
    img2[3] = 100 * np.exp(np.divide((img[3].astype('float') - img[1].astype('float')).astype('float'),(img[3].astype('float') + img[1].astype('float')).astype('float')))
    return img2



def ImgDifferencing(img1, img2):
    print()
    print('image difference!')
    print('shape of image1: {}'.format(img1.shape))
    print('shape of image2: {}'.format(img2.shape))
    if not img1.shape == img2.shape:
        print('影像尺寸不同！不能差分处理！')
        return None
    D_img = img1.astype('float') - img2.astype('float')
    D_img=abs(D_img)
    print('finish difference！')
    return D_img

def ImgDifferencing2(img1, img2):
    print()
    print('image difference!')
    print('shape of image1: {}'.format(img1.shape))
    print('shape of image2: {}'.format(img2.shape))
    if not img1.shape == img2.shape:
        print('影像尺寸不同！不能差分处理！')
        return None
    D_img = img1.astype('float') - img2.astype('float')
    #D_img=abs(D_img)
    print('finish difference！')
    return D_img



def ImgMagnitude(D_img):
    print('\n\nComputing magnitude of the difference image!')
    M_Img = np.zeros((D_img.shape[1], D_img.shape[2]), dtype=float, order='C')
    for i in range(0,D_img.shape[0]):
        print('Computing band{}...'.format(i + 1))
        a = D_img[i].astype('float')
        M_Img = M_Img + np.power(a, 2)
    M_Img1 = np.power(M_Img, 0.5)
    del a, M_Img
    print('finish Computing Magnitude！')
    return M_Img1




def Otsu(M_Img):
    print('\n\nBinary segmentation by Otsu!')
    min = np.min(M_Img)
    max = np.max(M_Img)
    M_Img1 = (M_Img - min) * 255 / (max - min)
    max = 0
    threashold = 0
    num = M_Img1.shape[0] * M_Img1.shape[1]
    for n in range(1, 255):
        a = M_Img1[M_Img1 < n].size
        b = num - a
        w0 = a / num
        w1 = b / num
        u0 = M_Img1[M_Img1 < n].mean()
        u1 = M_Img1[M_Img1 >= n].mean()
        g = w0 * w1 * (u0 - u1) * (u0 - u1)
        if g > max:
            max = g
            threashold = n
    I = np.array(M_Img1) > threashold
    II = I.astype('int')
    print('finish Binary segmentation！')
    return II


def CVA(Img1, Img2):
    D_Img = ImgDifferencing(Img1, Img2)
    M_Img = ImgMagnitude(D_Img)
    C_Img = Otsu(M_Img)
    return C_Img

def CVA2(Img1,Img2,Img3):
    D_Img12=ImgDifferencing(Img1,Img2)
    D_Img23=ImgDifferencing(Img2,Img3)
    D_Img13=ImgDifferencing(Img1,Img3)
    M_Img12=ImgMagnitude(D_Img12)
    M_Img23=ImgMagnitude(D_Img23)
    M_Img13=ImgMagnitude(D_Img13)
    Allimg=Pingjie(M_Img12,M_Img23,M_Img13)
    C_Img_ALL=Otsu(Allimg)
    CC_Img12,CC_Img23,CC_Img13=PingjieBack(C_Img_ALL)
    gdal_array.SaveArray(Allimg, 'Allimg.tif', 'GTiff', prototype=None)
    return CC_Img12,CC_Img23,CC_Img13




def LogicVer(C12, C23, C13):
    print('\n\nLogic verification!')
    print('shape of Change map between img1 and img2 (C12): {}'.format(C12.shape))
    print('shape of Change map between img2 and img3 (C23): {}'.format(C23.shape))
    print('shape of Change map between img1 and img3 (C23): {}'.format(C13.shape))
    if not C12.shape == C23.shape:
        print('影像尺寸不同！不能差分处理！')
        return None
    if not C12.shape == C13.shape:
        print('影像尺寸不同！不能差分处理！')
        return None
    print('ergodic begin!')
    Log_Img = np.zeros((C12.shape[0], C12.shape[1]), dtype=int, order='C')
    for i in range(0, C12.shape[0]):
        for j in range(0, C12.shape[1]):
            if C12[i, j]:
                if C23[i, j]:
                    if C13[i, j]:
                        Log_Img[i, j] = 5
                    else:
                        Log_Img[i, j] = 2
                else:
                    if C13[i, j]:
                        Log_Img[i, j] = 4
                    else:
                        Log_Img[i, j] = 7
            else:
                if C23[i, j]:
                    if C13[i, j]:
                        Log_Img[i, j] = 3
                    else:
                        Log_Img[i, j] = 8
                else:
                    if C13[i, j]:
                        Log_Img[i, j] = 6
                    else:
                        Log_Img[i, j] = 1
    print('ergodic over!')
    return Log_Img



def ASD_Lable(C12, C23, C13):
    if not C12.shape == C23.shape:
        print('影像尺寸不同！不能选取样本！')
        return None
    if not C12.shape == C13.shape:
        print('影像尺寸不同！不能选取样本！')
        return None
    print('\n\nAutomated sample decision!')
    Log_Img = LogicVer(C12, C23, C13)
    Lable_Img = np.zeros((3, C12.shape[0], C12.shape[1]), dtype=int, order='C')
    for i in range(0, C12.shape[0]):
        for j in range(0, C12.shape[1]):
            if Log_Img[i, j] == 1:
                #Lable_Img[0, i, j] = 1
                Lable_Img[1, i, j] = 1
                #Lable_Img[2, i, j] = 1
            if Log_Img[i, j] == 2:
                #Lable_Img[0, i, j] = 2
                #Lable_Img[1, i, j] = 0
                ...
            if Log_Img[i, j] == 3:
                #Lable_Img[1, i, j] = 2
                Lable_Img[1, i, j] = 2
            if Log_Img[i, j] == 4:
                Lable_Img[1, i, j] = 1
            if Log_Img[i, j] == 5:
                ...
            if Log_Img[i, j] == 6:
                ...
            if Log_Img[i, j] == 7:
                ...
            if Log_Img[i, j] == 8:
                ...
    print('\nfinish ASD!')
    gdal_array.SaveArray(Lable_Img, 'Lable.tif', 'GTiff', prototype=None)
    gdal_array.SaveArray(Log_Img, 'Logic.tif', 'GTiff', prototype=None)
    return Lable_Img


def ASD_Sample(Img1,Img2,Img3,LogicIMG,Lable_num):
    D12=ImgDifferencing2(Img1,Img2)
    D23=ImgDifferencing2(Img2,Img3)
    D13=ImgDifferencing2(Img1,Img3)
    if not Img1.shape == Img2.shape:
        print('影像尺寸不同！不能选取样本！')
        return None
    if not Img1.shape == Img3.shape:
        print('影像尺寸不同！不能选取样本！')
        return None
    if not Img1.shape[1] == LogicIMG.shape[0]:
        print('影像尺寸不同！不能选取样本！')
        return None
    if not Img1.shape[2] == LogicIMG.shape[1]:
        print('影像尺寸不同！不能选取样本！')
        return None
    print('\n\n开始处理样本！用于输入模型！')
    X1=np.zeros((Lable_num,2*D12.shape[0]),dtype=float,order='C')
    X2=np.zeros((Lable_num,2*D12.shape[0]),dtype=float,order='C')
    Y1=np.zeros((Lable_num,1),dtype=float,order='C')
    Y2=np.ones((Lable_num,1),dtype=float,order='C')
    XX1 = np.zeros((D12.shape[1]*D12.shape[2]*3,2*D12.shape[0]), dtype=float, order='C')
    XX2 = np.zeros((D12.shape[1]*D12.shape[2]*3,2*D12.shape[0]), dtype=float, order='C')
    m=0
    n=0
    myyyaaaaa = np.concatenate((Img2, Img3), axis=0)
    for i in range(0, LogicIMG.shape[0]):
        for j in range(0, LogicIMG.shape[1]):
            if (LogicIMG[i, j] != 3 and LogicIMG[i, j] != 5):
                XX1[m, ...] = myyyaaaaa[...,i,j]
                m = m + 1
            if (LogicIMG[i, j] == 3):
                XX2[n, ...] = myyyaaaaa[...,i,j]
                n = n + 1
    XX1=XX1[0:m,:]
    XX2=XX2[0:n,:]
    sample_list=[i for i in range(len(XX1))]
    sample_list=random.sample(sample_list,Lable_num)
    X1=XX1[sample_list,:]
    sample_list2=[i for i in range(len(XX2))]
    sample_list2=random.sample(sample_list2,Lable_num)
    X2=XX2[sample_list2,:]
    X=np.concatenate((X1,X2),axis=0)
    Y=np.concatenate((Y1,Y2),axis=0)
    sample_list5=[i for i in range(len(X))]
    sample_list5=random.sample(sample_list5,len(X))
    X=X[sample_list5,:]
    Y=Y[sample_list5,:]
    # data normalization
    scaler=sklearn.preprocessing.MinMaxScaler()
    scaler=scaler.fit(X)
    X=scaler.transform(X)
    Y=Y.astype('int')
    Y=Y.reshape(len(Y))
    print('finish!')
    return X,Y

def SVM_Train(X,y,Img1,Img2,Img3):

    print('开始训练SVM模型！')
    #y=y.ravel()
    clf=svm.SVC(kernel='rbf',probability=True,C=4)
    clf.fit(X,y)
    print('SVM模型训练完成，开始对影像分类！')
    D12 = ImgDifferencing2(Img1, Img2)
    D23 = ImgDifferencing2(Img2, Img3)
    D13 = ImgDifferencing2(Img1, Img3)
    if not Img1.shape == Img2.shape:
        print('影像尺寸不同！不能用于变化检测！')
        return None
    if not Img1.shape == Img3.shape:
        print('影像尺寸不同！不能用于变化检测！')
        return None
    #DI_L12 = np.zeros((D12.shape[1] * D12.shape[2], D12.shape[0]), dtype=float, order='C')
    DI_L23 = np.zeros((D23.shape[1] * D12.shape[2], 2*D23.shape[0]), dtype=float, order='C')
    #DI_L13 = np.zeros((D13.shape[1] * D12.shape[2], D13.shape[0]), dtype=float, order='C')

    # m = 0
    # for i in range(0, Img1.shape[1]):
    #     for j in range(0, Img1.shape[2]):
    #         DI_L12[m, :] = D12[:, i, j]
    #         m = m + 1

    myyyaaaaa = np.concatenate((Img2, Img3), axis=0)
    n = 0
    for i in range(0, Img2.shape[1]):
        for j in range(0, Img2.shape[2]):
            # DI_L23[n, :] = D23[:, i, j]
            DI_L23[n, :] = myyyaaaaa[:, i, j]

            n = n + 1

    # q = 0
    # for i in range(0, Img3.shape[1]):
    #     for j in range(0, Img3.shape[2]):
    #         DI_L13[q, :] = D13[:, i, j]
    #         q = q + 1

    # data normalization

    # scaler1=sklearn.preprocessing.MinMaxScaler()
    # scaler1=scaler1.fit(DI_L12)
    # DI_L12=scaler1.transform(DI_L12)

    scaler2=sklearn.preprocessing.MinMaxScaler()
    scaler2=scaler2.fit(DI_L23)
    DI_L23=scaler2.transform(DI_L23)

    # scaler3=sklearn.preprocessing.MinMaxScaler()
    # scaler3=scaler3.fit(DI_L13)
    # DI_L13=scaler3.transform(DI_L13)


    #PP12=clf.predict_proba(DI_L12)
    PP23=clf.predict_proba(DI_L23)
    #PP13=clf.predict_proba(DI_L13)


    #CI_L12 = clf.predict(DI_L12).astype('int')
    CI_L23=clf.predict(DI_L23).astype('int')
    #CI_L13=clf.predict(DI_L13).astype('int')


    #return CI_L12,CI_L23,CI_L13,PP12,PP23,PP13
    return CI_L23

def RF_Train(X,y,Img1,Img2,Img3):

    print('开始训练Random Forest模型！')
    # y=y.ravel()
    #clf = svm.SVC(probability=True)
    clf=RandomForestClassifier(n_estimators=500, n_jobs=-1)
    clf.fit(X, y)

    print('RF模型训练完成，开始对影像分类！')
    D12 = ImgDifferencing2(Img1, Img2)
    D23 = ImgDifferencing2(Img2, Img3)
    D13 = ImgDifferencing2(Img1, Img3)
    if not Img1.shape == Img2.shape:
        print('影像尺寸不同！不能用于变化检测！')
        return None
    if not Img1.shape == Img3.shape:
        print('影像尺寸不同！不能用于变化检测！')
        return None


    #DI_L12 = np.zeros((D12.shape[1] * D12.shape[2], D12.shape[0]), dtype=float, order='C')
    DI_L23 = np.zeros((D23.shape[1] * D12.shape[2], 2*D23.shape[0]), dtype=float, order='C')
    #DI_L13 = np.zeros((D13.shape[1] * D12.shape[2], D13.shape[0]), dtype=float, order='C')


  
    myyyaaaaa = np.concatenate((Img2, Img3), axis=0)
    n = 0
    for i in range(0, Img2.shape[1]):
        for j in range(0, Img2.shape[2]):
            # DI_L23[n, :] = D23[:, i, j]
            DI_L23[n, :] = myyyaaaaa[:, i, j]
            n = n + 1



  
    # scaler1 = sklearn.preprocessing.MinMaxScaler()
    # scaler1 = scaler1.fit(DI_L12)
    # DI_L12 = scaler1.transform(DI_L12)

    scaler2 = sklearn.preprocessing.MinMaxScaler()
    scaler2 = scaler2.fit(DI_L23)
    DI_L23 = scaler2.transform(DI_L23)

    # scaler3 = sklearn.preprocessing.MinMaxScaler()
    # scaler3 = scaler3.fit(DI_L13)
    # DI_L13 = scaler3.transform(DI_L13)


    # PP12 = clf.predict_proba(DI_L12)
    PP23 = clf.predict_proba(DI_L23)
    # PP13 = clf.predict_proba(DI_L13)

    # CI_L12 = clf.predict(DI_L12).astype('int')
    CI_L23 = clf.predict(DI_L23).astype('int')
    # CI_L13 = clf.predict(DI_L13).astype('int')

    #return CI_L12, CI_L23, CI_L13, PP12, PP23, PP13
    return  CI_L23

def KNN_Train(X,y,Img1,Img2,Img3):

    print('开始训练KNN模型！')
    clf=KNeighborsClassifier(n_neighbors=4, n_jobs=-1)
    clf.fit(X, y)

    print('KNN模型训练完成，开始对影像分类！')
    D12 = ImgDifferencing2(Img1, Img2)
    D23 = ImgDifferencing2(Img2, Img3)
    D13 = ImgDifferencing2(Img1, Img3)
    if not Img1.shape == Img2.shape:
        print('影像尺寸不同！不能用于变化检测！')
        return None
    if not Img1.shape == Img3.shape:
        print('影像尺寸不同！不能用于变化检测！')
        return None

    # DI_L12 = np.zeros((D12.shape[1] * D12.shape[2], D12.shape[0]), dtype=float, order='C')
    DI_L23 = np.zeros((D23.shape[1] * D12.shape[2], 2*D23.shape[0]), dtype=float, order='C')
    #DI_L13 = np.zeros((D13.shape[1] * D12.shape[2], D13.shape[0]), dtype=float, order='C')

    myyyaaaaa = np.concatenate((Img2, Img3), axis=0)
    n = 0
    for i in range(0, Img2.shape[1]):
        for j in range(0, Img2.shape[2]):
            DI_L23[n, :] = myyyaaaaa[:, i, j]
            # DI_L23[n, :] = D23[:, i, j]
            n = n + 1



    # data normalization

  

    # scaler1 = sklearn.preprocessing.MinMaxScaler()
    # scaler1 = scaler1.fit(DI_L12)
    # DI_L12 = scaler1.transform(DI_L12)

    scaler2 = sklearn.preprocessing.MinMaxScaler()
    scaler2 = scaler2.fit(DI_L23)
    DI_L23 = scaler2.transform(DI_L23)

    # scaler3 = sklearn.preprocessing.MinMaxScaler()
    # scaler3 = scaler3.fit(DI_L13)
    # DI_L13 = scaler3.transform(DI_L13)

    #PP12 = clf.predict_proba(DI_L12)
    PP23 = clf.predict_proba(DI_L23)
    # PP13 = clf.predict_proba(DI_L13)

    #CI_L12 = clf.predict(DI_L12).astype('int')
    CI_L23 = clf.predict(DI_L23).astype('int')
   # CI_L13 = clf.predict(DI_L13).astype('int')

    #return CI_L12, CI_L23, CI_L13, PP12, PP23, PP13
    return  CI_L23


def MLP_Train(X,y,Img1,Img2,Img3):

    print('开始训练SVM模型！')
    #y=y.ravel()
    clf=MLPClassifier()
    clf.fit(X,y)

    print('SVM模型训练完成，开始对影像分类！')

    D12 = ImgDifferencing2(Img1, Img2)
    D23 = ImgDifferencing2(Img2, Img3)
    D13 = ImgDifferencing2(Img1, Img3)
    if not Img1.shape == Img2.shape:
        print('影像尺寸不同！不能用于变化检测！')
        return None
    if not Img1.shape == Img3.shape:
        print('影像尺寸不同！不能用于变化检测！')
        return None


    #DI_L12 = np.zeros((D12.shape[1] * D12.shape[2], D12.shape[0]), dtype=float, order='C')
    DI_L23 = np.zeros((D23.shape[1] * D12.shape[2], 2*D23.shape[0]), dtype=float, order='C')
    #DI_L13 = np.zeros((D13.shape[1] * D12.shape[2], D13.shape[0]), dtype=float, order='C')
    myyyaaaaa = np.concatenate((Img2, Img3), axis=0)
    n = 0
    for i in range(0, Img2.shape[1]):
        for j in range(0, Img2.shape[2]):
            DI_L23[n, :] = myyyaaaaa[:, i, j]
            # DI_L23[n, :] = D23[:, i, j]
            n = n + 1

    # data normalization

    # scaler1=sklearn.preprocessing.MinMaxScaler()
    # scaler1=scaler1.fit(DI_L12)
    # DI_L12=scaler1.transform(DI_L12)

    scaler2=sklearn.preprocessing.MinMaxScaler()
    scaler2=scaler2.fit(DI_L23)
    DI_L23=scaler2.transform(DI_L23)

    # scaler3=sklearn.preprocessing.MinMaxScaler()
    # scaler3=scaler3.fit(DI_L13)
    # DI_L13=scaler3.transform(DI_L13)

    #PP12=clf.predict_proba(DI_L12)
    PP23=clf.predict_proba(DI_L23)
    #PP13=clf.predict_proba(DI_L13)


    #CI_L12 = clf.predict(DI_L12).astype('int')
    CI_L23=clf.predict(DI_L23).astype('int')
    #CI_L13=clf.predict(DI_L13).astype('int')



    #return CI_L12,CI_L23,CI_L13,PP12,PP23,PP13
    return  CI_L23

def ImgShapeBack(Img_L,Img):

    if not (Img_L.shape[0]==Img.shape[1]*Img.shape[2]):
        print('尺寸不符合像素回溯要求！')

    New_Img = np.empty([Img.shape[1], Img.shape[2]])
    for i in range(0,Img.shape[1]):
        for j in range(0,Img.shape[2]):
            New_Img[i,j]=Img_L[i*Img.shape[2]+j]

    return New_Img


def ImgShapeBack2(Img_L,Img):

    if not (Img_L.shape[0]==Img.shape[0]*Img.shape[1]):
        print('尺寸不符合像素回溯要求！')
    New_Img = np.empty([Img.shape[0], Img.shape[1]])
    for i in range(0,Img.shape[0]):
        for j in range(0,Img.shape[1]):
            New_Img[i,j]=Img_L[i*Img.shape[1]+j]

    return New_Img


def Z_O_Trun(Num):
    if Num==0:
        Num=1
    else:
        if Num==1:
            Num=0
        else:
            print('输入有误！')
    return Num




def Modification4(C_Img_ByCVA_12,C_L_BySVM_23,C_L_ByRF_23,C_L_ByMLP_23):
    MyResult_L = np.zeros((C_Img_ByCVA_12.shape[1] * C_Img_ByCVA_12.shape[0]), dtype=float, order='C')
    for i in range(0,C_Img_ByCVA_12.shape[1] * C_Img_ByCVA_12.shape[0]):
        if C_L_BySVM_23[i]==C_L_ByRF_23[i]:
            MyResult_L[i]=C_L_BySVM_23[i]
        if C_L_BySVM_23[i]==C_L_ByMLP_23[i]:
            MyResult_L[i]=C_L_ByMLP_23[i]
        if C_L_ByRF_23[i]==C_L_ByMLP_23[i]:
            MyResult_L[i]=C_L_ByRF_23[i]
    return MyResult_L



def Assessment(Result_L,MyLabel_L):

    print('对于预测结果进行精度评估！')
    # 准确率 Accuracy
    MyAccuracy=accuracy_score(MyLabel_L,Result_L)*100
    print('准确率 Accuracy = {}'.format(MyAccuracy))

    # 召回率 Recall
    MyRecall= recall_score(MyLabel_L,Result_L)
    print('召回率 Recall = {}'.format(MyRecall))

    # 精确度 Precision
    MyPrecision=precision_score(MyLabel_L,Result_L)
    print('精确度 Precision = {}'.format(MyPrecision))

    # Kappa系数
    MyKappa=cohen_kappa_score(MyLabel_L,Result_L)
    print('Kappa系数 = {}'.format(MyKappa))

    # F1得分
    MyF1=f1_score(MyLabel_L,Result_L)
    print('F1得分 F1Score = {}'.format(MyF1))

    # 混淆矩阵
    MyConfusion=confusion_matrix(MyLabel_L,Result_L)
    FN = MyConfusion[1][0]
    TN = MyConfusion[0][0]
    TP = MyConfusion[1][1]
    FP = MyConfusion[0][1]
    # 以条形图显示混乱矩阵
    plt.bar(['False Negative', 'True Negative', 'True Positive', 'False Positive'], [FN, TN, TP, FP])
    plt.savefig('./BarFig.png')  # 存储图像
    plt.show()
    # 将混淆矩阵显示为热图
    sns.heatmap(MyConfusion, annot=True, xticklabels=['Negative', 'Positive'], yticklabels=['Negative', 'Positive'])
    plt.ylabel("Label")
    plt.xlabel("Predicted")
    plt.savefig('./HeatFig.png')  # 存储图像
    plt.show()

    # 分类报告
    print('分类报告：')
    print()
    print(classification_report(MyLabel_L, Result_L))

    return




def My_Kmeans(AM_IMG,kk):


    AMAM_L = np.zeros((AM_IMG.shape[2] * AM_IMG.shape[1]), dtype=int, order='C')
    d = 0
    for i in range(0, AM_IMG.shape[1]):
        for j in range(0, AM_IMG.shape[2]):
            AMAM_L[d] = AM_IMG[1,i, j]
            d = d + 1

    AMAM_L=AMAM_L.astype('int')
    AMAM_L=AMAM_L.reshape(-1,1)

    kmeans=KMeans(n_clusters=kk)
    kmeans.fit(AMAM_L)
    y_kmeans = kmeans.predict(AMAM_L).astype('int')
    #plt.scatter(AMAM_L[:, 0], AMAM_L[:, 0], c=y_kmeans, s=50, cmap='viridis')

    IMGG=ImgShapeBack(y_kmeans,AM_IMG)
    return IMGG


def My_ReClass_IMG(M_IMG,A_IMG,MYIMG):
    IMGGG = np.zeros((M_IMG.shape[0] , A_IMG.shape[1]), dtype=int, order='C')
    IMGGG=M_IMG*(A_IMG+1)
    IMGGG3 = M_IMG * (A_IMG + 1)
    gdal_array.SaveArray(IMGGG3, '3zhong.tif', 'GTiff', prototype=None)

    MYIMG_abs=np.abs(MYIMG[3])
    my_one=0
    my_two=0
    my_three=0

    my_one_N=0
    my_two_N=0
    my_three_N=0

    for i in range(0,M_IMG.shape[0]):
        for j in range(0,M_IMG.shape[1]):
            if IMGGG[i,j]==1:
                my_one=my_one+1
                my_one_N=my_one_N+MYIMG_abs[i,j]
            if IMGGG[i,j]==2:
                my_two=my_two+1
                my_two_N=my_two_N+MYIMG_abs[i,j]
            if IMGGG[i,j]==3:
                my_three=my_three+1
                my_three_N=my_three_N+MYIMG_abs[i,j]

    one_mean=my_one_N/my_one
    two_mean=my_two_N/my_two
    three_mean=my_three_N/my_three

    my_max=max(one_mean,two_mean,three_mean)
    if my_max==one_mean:
        for i in range(0, M_IMG.shape[0]):
            for j in range(0, M_IMG.shape[1]):
                if IMGGG[i, j] != 1:
                    IMGGG[i,j]=0
                if IMGGG[i, j] == 1:
                    IMGGG[i,j]=1
    if my_max==two_mean:
        for i in range(0, M_IMG.shape[0]):
            for j in range(0, M_IMG.shape[1]):
                if IMGGG[i, j] != 2:
                    IMGGG[i,j]=0
                if IMGGG[i, j] == 2:
                    IMGGG[i,j]=1
    if my_max==three_mean:
        for i in range(0, M_IMG.shape[0]):
            for j in range(0, M_IMG.shape[1]):
                if IMGGG[i, j] != 3:
                    IMGGG[i,j]=0
                if IMGGG[i, j] == 3:
                    IMGGG[i,j]=1

    return IMGGG,IMGGG3


def Pingjie(Img1,Img2,Img3):
    Imggg=np.concatenate((Img1,Img2),axis=1)
    Imggg1=np.concatenate((Imggg,Img3),axis=1)
    return Imggg1

def PingjieBack(Imgg):
    mylong=int((Imgg.shape[1])/3)
    img1=Imgg[:,0:mylong]
    img2=Imgg[:,mylong:2*mylong]
    img3=Imgg[:,2*mylong:3*mylong]
    return img1,img2,img3


def Jiehe(logicimg,myimg):
    MyL = np.zeros((myimg.shape[0], myimg.shape[1]), dtype=int, order='C')
    for i in range(0,logicimg.shape[0]):
        for j in range(0,logicimg.shape[1]):
            # if logicimg[i,j]==1:
            #     MyL[i,j]=0
            # if logicimg[i,j]==2:
            #     MyL[i,j]=0
            if logicimg[i,j]==3 and myimg[i,j]==1:
                MyL[i,j]=1
            # if logicimg[i,j]==4:
            #     MyL[i,j]=0
            if logicimg[i,j]==5:
                MyL[i,j]=myimg[i,j]
            # if logicimg[i,j]==6:
            #     MyL[i,j]=0
            # if logicimg[i,j]==7:
            #     MyL[i,j]=0
            # if logicimg[i,j]==8:
            #     MyL[i,j]=0
    return MyL








# 米林影像
filename1 = r'.\Mainling_20171114.tif'
# filename1 = r'.\Mainling_20171117_noisy_0.05.tif'
filename2 = r'.\Mainling_20171117.tif'
filename3 = r'.\Mainling_20171219.tif'
# #
# #泸定影像
# filename1 = r'.\LuDing_20220724.tif'
# filename1 = r'.\LuDing_20220421.tif'
# filename2 = r'.\LuDing_20220724.tif'
# filename3 = r'.\LuDing_20221020.tif'

# filename1 = r'.\LuDing_20220421_BIP.tif'
# filename2 = r'.\LuDing_20220724_BIP.tif'
# filename3 = r'.\LuDing_20221020_BIP.tif'

# 北海道影像
# filename1 = r'.\BHD_20180512.tif'
# filename2 = r'.\BHD_20180803.tif'
# filename3 = r'.\BHD_20180911.tif'




# 读取影像
dataset1 = ReadImg(filename1)
dataset2 = ReadImg(filename2)
dataset3 = ReadImg(filename3)

im_data11 = dataset1.ReadAsArray()
im_data22 = dataset2.ReadAsArray()
im_data33 = dataset3.ReadAsArray()


im_data1 = ImgFeatureExtraction(im_data11)
im_data2 = ImgFeatureExtraction(im_data22)
im_data3 = ImgFeatureExtraction(im_data33)



gdal_array.SaveArray(im_data1, 'MYIMG1.tif', 'GTiff', prototype=None)
gdal_array.SaveArray(im_data2, 'MYIMG2.tif', 'GTiff', prototype=None)
gdal_array.SaveArray(im_data3, 'MYIMG3.tif', 'GTiff', prototype=None)


MYDDDD12=ImgDifferencing(im_data1,im_data2)
MYDDDD13=ImgDifferencing(im_data1,im_data3)
MYDDDD23=ImgDifferencing(im_data2,im_data3)

gdal_array.SaveArray(MYDDDD12, 'MYDDDD12.tif', 'GTiff', prototype=None)
gdal_array.SaveArray(MYDDDD23, 'MYDDDD23.tif', 'GTiff', prototype=None)
gdal_array.SaveArray(MYDDDD13, 'MYDDDD13.tif', 'GTiff', prototype=None)


MYMMMM12 = ImgMagnitude(MYDDDD12)
MYMMMM13 = ImgMagnitude(MYDDDD13)
MYMMMM23 = ImgMagnitude(MYDDDD23)


gdal_array.SaveArray(MYMMMM12, 'MYMMMM12.tif', 'GTiff', prototype=None)
gdal_array.SaveArray(MYMMMM13, 'MYMMMM13.tif', 'GTiff', prototype=None)
gdal_array.SaveArray(MYMMMM23, 'MYMMMM23.tif', 'GTiff', prototype=None)


C_Img232323 = CVA(im_data22, im_data33)
gdal_array.SaveArray(C_Img232323, 'C23ByCVA.tif', 'GTiff', prototype=None)

C_Img12,C_Img23,C_Img13=CVA2(im_data1,im_data2,im_data3)


gdal_array.SaveArray(C_Img12, 'C12ByCVA.tif', 'GTiff', prototype=None)
gdal_array.SaveArray(C_Img23, 'C23ByCVA.tif', 'GTiff', prototype=None)
gdal_array.SaveArray(C_Img13, 'C13ByCVA.tif', 'GTiff', prototype=None)



Logic_Img = LogicVer(C_Img12, C_Img23, C_Img13)
Lable_Img=ASD_Lable(C_Img12,C_Img23,C_Img13)
gdal_array.SaveArray(Lable_Img, 'Lable.tif', 'GTiff', prototype=None)
gdal_array.SaveArray(Logic_Img, 'myLogic.tif', 'GTiff', prototype=None)

# X,Y=ASD_Sample(im_data1,im_data2,im_data3,Logic_Img,10000)
X2,Y2=ASD_Sample(im_data1,im_data2,im_data3,Logic_Img,500)
X3,Y3=ASD_Sample(im_data1,im_data2,im_data3,Logic_Img,500)
X4,Y4=ASD_Sample(im_data1,im_data2,im_data3,Logic_Img,500)


SVM_CI_L23=SVM_Train(X2,Y2,im_data1,im_data2,im_data3)
My_Result_SVM=ImgShapeBack(SVM_CI_L23,im_data1)
gdal_array.SaveArray(My_Result_SVM, '0aaaaLast_SVM.tif', 'GTiff', prototype=None)

RF_CI_L23=RF_Train(X3,Y3,im_data1,im_data2,im_data3)
My_Result_RF=ImgShapeBack(RF_CI_L23,im_data1)
gdal_array.SaveArray(My_Result_RF, '0aaaaLast_RF.tif', 'GTiff', prototype=None)

MLP_CI_L23=MLP_Train(X4,Y4,im_data1,im_data2,im_data3)
My_Result_MLP=ImgShapeBack(MLP_CI_L23,im_data1)
gdal_array.SaveArray(My_Result_MLP, '0aaaaLast_MLP.tif', 'GTiff', prototype=None)






My_Result_L=Modification4(C_Img12,SVM_CI_L23,RF_CI_L23,MLP_CI_L23)
My_Result=ImgShapeBack(My_Result_L,im_data1)



My_Result2=Jiehe(Logic_Img,My_Result)


gdal_array.SaveArray(My_Result, '0aaaaLast.tif', 'GTiff', prototype=None)
gdal_array.SaveArray(My_Result2, '0aaaaLast_JieHe.tif', 'GTiff', prototype=None)

#gdal_array.SaveArray(My_Result, 'C23_My_Result.tif', 'GTiff', prototype=None)

filename4=r'.\Label_LuDing_1013.tif'
dataset4=ReadImg(filename4)
im_data4=dataset4.ReadAsArray()


MyLabel_L = np.zeros((im_data4.shape[1] * im_data4.shape[2],im_data4.shape[0]), dtype=int, order='C')
d=0
for i in range(0,im_data4.shape[1]):
    for j in range(0,im_data4.shape[2]):
        MyLabel_L[d,...]=im_data4[...,i,j]
        d=d+1

My_Result_L2 = np.zeros((im_data4.shape[1] * im_data4.shape[0]), dtype=int, order='C')
d=0
for i in range(0,im_data4.shape[0]):
    for j in range(0,im_data4.shape[1]):
        My_Result_L2[d]=My_Result2[i,j]
        d=d+1

#Assessment(CC_Img23,MyLabel_L)
#Assessment(My_Result_L2,MyLabel_L)





print('TEST OVER!')
